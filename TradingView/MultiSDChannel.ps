//@version=4
study("Multi SD Channel", shorttitle="MultiSDChannel", overlay=true)

// small SD channel
upperMultSm = input(title="Upper Small Deviation", defval=2)
lowerMultSm = input(title="Lower Small Deviation", defval=-2)
useUpperDevSm = input(title="Use Upper Small Deviation", defval=true)
useLowerDevSm = input(title="Use Lower Small Deviation", defval=true)

// large SD channel
upperMultLg = input(title="Upper Large Deviation", defval=3)
lowerMultLg = input(title="Lower Large Deviation", defval=-3)
useUpperDevLg = input(title="Use Upper Large Deviation", defval=true)
useLowerDevLg = input(title="Use Lower Large Deviation", defval=true)

len = input(title="Count", defval=200)
src = input(title="Source", defval=close)

extendLines = input(title="Extend Lines", defval=true)
extend = extendLines ? extend.right : extend.none

calcSlope(src, len) =>
	max_bars_back(src, 300)
	if not barstate.islast or len <= 1
		[float(na), float(na), float(na)]
	else
		sumX = 0.0
		sumY = 0.0
		sumXSqr = 0.0
		sumXY = 0.0
		for i = 0 to len - 1
			val = src[i]
			per = i + 1.0
			sumX := sumX + per
			sumY := sumY + val
			sumXSqr := sumXSqr + per * per
			sumXY := sumXY + val * per
		slope = (len * sumXY - sumX * sumY) / (len * sumXSqr - sumX * sumX)
		average = sumY / len
		intercept = average - slope * sumX / len + slope
		[slope, average, intercept]
[s, a, i] = calcSlope(src, len)

startPrice = i + s * (len - 1)
endPrice = i
var line baseLine = na
if na(baseLine) and not na(startPrice)
	baseLine := line.new(bar_index - len + 1, startPrice, bar_index, endPrice, width=1, extend=extend, color=color.red)
else
	line.set_xy1(baseLine, bar_index - len + 1, startPrice)
	line.set_xy2(baseLine, bar_index, endPrice)
	na
	
calcDev(src, len, slope, average, intercept) =>
	upDev = 0.0
	dnDev = 0.0
	stdDevAcc = 0.0
	dsxx = 0.0
	dsyy = 0.0
	dsxy = 0.0
	periods = len - 1
	daY = intercept + (slope * periods) / 2
	val = intercept
	for i = 0 to periods
		price = high[i] - val
		if (price > upDev)
			upDev := price
		price := val - low[i]
		if (price > dnDev)
			dnDev := price
		price := src[i]
		dxt = price - average
		dyt = val - daY
		price := price - val
		stdDevAcc := stdDevAcc + price * price
		dsxx := dsxx + dxt * dxt
		dsyy := dsyy + dyt * dyt
		dsxy := dsxy + dxt * dyt
		val := val + slope
	stdDev = sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
	[stdDev, upDev, dnDev]
[stdDev, upDev, dnDev] = calcDev(src, len, s, a, i)

upperSmStartPrice = startPrice + (useUpperDevSm ? upperMultSm * stdDev : upDev)
upperSmEndPrice = endPrice + (useUpperDevSm ? upperMultSm * stdDev : upDev)
var line upperSm = na

upperLgStartPrice = startPrice + (useUpperDevLg ? upperMultLg * stdDev : upDev)
upperLgEndPrice = endPrice + (useUpperDevLg ? upperMultLg * stdDev : upDev)
var line upperLg = na

lowerSmStartPrice = startPrice + (useLowerDevSm ? lowerMultSm * stdDev : -dnDev)
lowerSmEndPrice = endPrice + (useLowerDevSm ? lowerMultSm * stdDev : -dnDev)
var line lowerSm = na

lowerLgStartPrice = startPrice + (useLowerDevLg ? lowerMultLg * stdDev : -dnDev)
lowerLgEndPrice = endPrice + (useLowerDevLg ? lowerMultLg * stdDev : -dnDev)
var line lowerLg = na

if na(upperSm) and not na(upperSmStartPrice)
	upperSm := line.new(bar_index - len + 1, upperSmStartPrice, bar_index, upperSmEndPrice, width=1, extend=extend, color=color.blue)
else
	line.set_xy1(upperSm, bar_index - len + 1, upperSmStartPrice)
	line.set_xy2(upperSm, bar_index, upperSmEndPrice)
	na

if na(upperLg) and not na(upperLgStartPrice)
    upperLg := line.new(bar_index - len + 1, upperLgStartPrice, bar_index, upperLgEndPrice, width=1, extend=extend, color=color.yellow)
else
    line.set_xy1(upperLg, bar_index - len + 1, upperLgStartPrice)
    line.set_xy2(upperLg, bar_index, upperLgEndPrice)
    na

if na(lowerSm) and not na(lowerSmStartPrice)
	lowerSm := line.new(bar_index - len + 1, lowerSmStartPrice, bar_index, lowerSmEndPrice, width=1, extend=extend, color=color.blue)
else
	line.set_xy1(lowerSm, bar_index - len + 1, lowerSmStartPrice)
	line.set_xy2(lowerSm, bar_index, lowerSmEndPrice)
	na

if na(lowerLg) and not na(lowerLgStartPrice)
	lowerLg := line.new(bar_index - len + 1, lowerLgStartPrice, bar_index, lowerLgEndPrice, width=1, extend=extend, color=color.yellow)
else
	line.set_xy1(lowerLg, bar_index - len + 1, lowerLgStartPrice)
	line.set_xy2(lowerLg, bar_index, lowerLgEndPrice)
	na

// To-Do:
// 1) Make plots work and fill in background
// 2) Set up drawing input for start and end calculations
// 3) Keep study from updating when the view changes

// upperSmPlot = plot(upperSm-baseline)
// upperLgPlot = plot(upperLg-upperSm)
// lowerSmPlot = plot(baseline-lowerSm)
// lowerLgPlot = plot(lowerSm-lowerLg)

// fill(upperSmPlot, lowerSmPlot, color=color.blue, transp=0.2)


